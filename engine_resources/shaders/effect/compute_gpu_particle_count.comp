#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "../common/scene_constants.glsl"
#include "../common/utility.glsl"
#include "process_gpu_particle_common.glsl"

layout(binding = 0) uniform SceneConstants
{
    SCENE_CONSTANTS scene_constants;
};
layout(binding = 1) buffer GpuParticleStaticConstantsBuffer
{
    GpuParticleStaticConstants gpu_particle_static_constants[];
};
layout(binding = 2) buffer GpuParticleDynamicConstantsBuffer
{
    GpuParticleDynamicConstants gpu_particle_dynamic_constants[];
};
layout(binding = 3) buffer GpuParticleCountBuffer
{
    GpuParticleCountBufferData gpu_particle_count_buffer[];
};

layout(local_size_x=PROCESS_GPU_PARTICLE_WORK_GROUP_SIZE, local_size_y=1, local_size_z=1) in;
void main()
{
    const int emitter_index = int(gl_GlobalInvocationID.x);
    if(emitter_index < pushConstant._dispatch_count)
    {
        const int count_buffer_index = scene_constants.GPU_PARTICLE_COUNT_BUFFER_OFFSET + emitter_index;
        const uint gpu_particle_constant_flags = gpu_particle_dynamic_constants[emitter_index]._gpu_particle_constant_flags;
        if(emitter_index < pushConstant._process_emitter_count && false == check_flags_all(GPU_PARTICLE_CONSTANT_FLAG_CLEAR, gpu_particle_constant_flags))
        {
            int particle_alive_count = 0;
            int particle_dead_count = 0;
            if(false == check_flags_all(GPU_PARTICLE_CONSTANT_FLAG_FIRST_UPDATE, gpu_particle_constant_flags))
            {
                const int prev_count_buffer_index = scene_constants.PREV_GPU_PARTICLE_COUNT_BUFFER_OFFSET + gpu_particle_dynamic_constants[emitter_index]._prev_allocated_emitter_index;
                particle_dead_count = gpu_particle_count_buffer[prev_count_buffer_index]._particle_dead_count;
                particle_alive_count = max(0, gpu_particle_count_buffer[prev_count_buffer_index]._particle_alive_count - particle_dead_count);
            }

            const int max_particle_count = min(scene_constants.MAX_PARTICLE_COUNT, gpu_particle_static_constants[emitter_index]._max_particle_count);
            const int available_particle_spawn_count = min(max(0, max_particle_count - particle_alive_count), gpu_particle_dynamic_constants[emitter_index]._spawn_count);
            gpu_particle_count_buffer[count_buffer_index]._particle_buffer_offset = particle_dead_count;
            gpu_particle_count_buffer[count_buffer_index]._prev_particle_alive_count = particle_alive_count;
            gpu_particle_count_buffer[count_buffer_index]._particle_alive_count = particle_alive_count + available_particle_spawn_count;
            gpu_particle_count_buffer[count_buffer_index]._particle_dead_count = 0;
        }
        else
        {
            gpu_particle_count_buffer[count_buffer_index]._particle_buffer_offset = 0;
            gpu_particle_count_buffer[count_buffer_index]._prev_particle_alive_count = 0;
            gpu_particle_count_buffer[count_buffer_index]._particle_alive_count = 0;
            gpu_particle_count_buffer[count_buffer_index]._particle_dead_count = 0;
        }
    }
}
