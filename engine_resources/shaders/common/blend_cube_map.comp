#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

layout( push_constant ) uniform PushConstant_BlendCubeMap
{
    float _blend_ratio;
    uint _reserved0;
    uint _reserved1;
    uint _reserved2;
} pushConstant;

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform readonly image2D img_input_0_0;
layout(rgba32f, binding = 1) uniform readonly image2D img_input_0_1;
layout(rgba32f, binding = 2) uniform readonly image2D img_input_0_2;
layout(rgba32f, binding = 3) uniform readonly image2D img_input_0_3;
layout(rgba32f, binding = 4) uniform readonly image2D img_input_0_4;
layout(rgba32f, binding = 5) uniform readonly image2D img_input_0_5;
layout(rgba32f, binding = 6) uniform readonly image2D img_input_1_0;
layout(rgba32f, binding = 7) uniform readonly image2D img_input_1_1;
layout(rgba32f, binding = 8) uniform readonly image2D img_input_1_2;
layout(rgba32f, binding = 9) uniform readonly image2D img_input_1_3;
layout(rgba32f, binding = 10) uniform readonly image2D img_input_1_4;
layout(rgba32f, binding = 11) uniform readonly image2D img_input_1_5;
layout(rgba32f, binding = 12) uniform image2D img_output_0;
layout(rgba32f, binding = 13) uniform image2D img_output_1;
layout(rgba32f, binding = 14) uniform image2D img_output_2;
layout(rgba32f, binding = 15) uniform image2D img_output_3;
layout(rgba32f, binding = 16) uniform image2D img_output_4;
layout(rgba32f, binding = 17) uniform image2D img_output_5;

void main()
{
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    vec4 color_0_0 = imageLoad(img_input_0_0, pixel_coords);
    vec4 color_0_1 = imageLoad(img_input_0_1, pixel_coords);
    vec4 color_0_2 = imageLoad(img_input_0_2, pixel_coords);
    vec4 color_0_3 = imageLoad(img_input_0_3, pixel_coords);
    vec4 color_0_4 = imageLoad(img_input_0_4, pixel_coords);
    vec4 color_0_5 = imageLoad(img_input_0_5, pixel_coords);
    vec4 color_1_0 = imageLoad(img_input_1_0, pixel_coords);
    vec4 color_1_1 = imageLoad(img_input_1_1, pixel_coords);
    vec4 color_1_2 = imageLoad(img_input_1_2, pixel_coords);
    vec4 color_1_3 = imageLoad(img_input_1_3, pixel_coords);
    vec4 color_1_4 = imageLoad(img_input_1_4, pixel_coords);
    vec4 color_1_5 = imageLoad(img_input_1_5, pixel_coords);
    imageStore(img_output_0, pixel_coords, mix(color_0_0, color_1_0, pushConstant._blend_ratio));
    imageStore(img_output_1, pixel_coords, mix(color_0_1, color_1_1, pushConstant._blend_ratio));
    imageStore(img_output_2, pixel_coords, mix(color_0_2, color_1_2, pushConstant._blend_ratio));
    imageStore(img_output_3, pixel_coords, mix(color_0_3, color_1_3, pushConstant._blend_ratio));
    imageStore(img_output_4, pixel_coords, mix(color_0_4, color_1_4, pushConstant._blend_ratio));
    imageStore(img_output_5, pixel_coords, mix(color_0_5, color_1_5, pushConstant._blend_ratio));
}