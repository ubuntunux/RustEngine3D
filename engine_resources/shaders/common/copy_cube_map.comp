#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform readonly image2D img_input_0;
layout(rgba32f, binding = 1) uniform readonly image2D img_input_1;
layout(rgba32f, binding = 2) uniform readonly image2D img_input_2;
layout(rgba32f, binding = 3) uniform readonly image2D img_input_3;
layout(rgba32f, binding = 4) uniform readonly image2D img_input_4;
layout(rgba32f, binding = 5) uniform readonly image2D img_input_5;
layout(rgba32f, binding = 6) uniform image2D img_output_0;
layout(rgba32f, binding = 7) uniform image2D img_output_1;
layout(rgba32f, binding = 8) uniform image2D img_output_2;
layout(rgba32f, binding = 9) uniform image2D img_output_3;
layout(rgba32f, binding = 10) uniform image2D img_output_4;
layout(rgba32f, binding = 11) uniform image2D img_output_5;

void main()
{
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    vec4 color_0 = imageLoad(img_input_0, pixel_coords);
    vec4 color_1 = imageLoad(img_input_1, pixel_coords);
    vec4 color_2 = imageLoad(img_input_2, pixel_coords);
    vec4 color_3 = imageLoad(img_input_3, pixel_coords);
    vec4 color_4 = imageLoad(img_input_4, pixel_coords);
    vec4 color_5 = imageLoad(img_input_5, pixel_coords);
    imageStore(img_output_0, pixel_coords, color_0);
    imageStore(img_output_1, pixel_coords, color_1);
    imageStore(img_output_2, pixel_coords, color_2);
    imageStore(img_output_3, pixel_coords, color_3);
    imageStore(img_output_4, pixel_coords, color_4);
    imageStore(img_output_5, pixel_coords, color_5);
}